---
- name: Configure the Jenkins server.
  block:
    - name: Check if jenkins_init_file exists.
      stat:
        path: "{{ jenkins_init_file }}"
      register: jenkins_init_file_stat
      become: false

    - name: Ensure jenkins_init_file exists.
      file:
        path: "{{ jenkins_init_file }}"
        state: touch
      when: not jenkins_init_file_stat.stat.exists

    - name: Modify variables in init file.
      lineinfile:
        dest: "{{ jenkins_init_file }}"
        insertafter: "^{{ item.option }}="
        regexp: '^{{ item.option }}=\"\${{ item.option }} '
        line: '{{ item.option }}="${{ item.option }} {{ item.value }}"'
        state: present
      with_items: "{{ jenkins_init_changes }}"
      register: jenkins_init_prefix

    - name: Ensure jenkins_home {{ jenkins_home }} exists.
      file:
        path: "{{ jenkins_home }}"
        state: directory
        owner: "{{ jenkins_process_user }}"
        group: "{{ jenkins_process_user }}"
        mode: u+rwx
        follow: true

    - name: Set the Jenkins home directory.
      lineinfile:
        dest: "{{ jenkins_init_file }}"
        regexp: "^JENKINS_HOME=.*"
        line: "JENKINS_HOME={{ jenkins_home }}"
      register: jenkins_home_config

    # A handler cannot be called conditionally without workaround.
    - name: Immediately restart Jenkins on init config changes.
      service: name=jenkins state=restarted
      when: jenkins_init_prefix.changed

    - name: Set HTTP port in Jenkins config.
      lineinfile:
        backrefs: true
        dest: "{{ jenkins_init_file }}"
        regexp: "^{{ jenkins_http_port_param }}="
        line: "{{ jenkins_http_port_param }}={{ jenkins_http_port }}"
      register: jenkins_http_config

    - name: Create custom init scripts directory.
      file:
        path: "{{ jenkins_home }}/init.groovy.d"
        state: directory
        owner: "{{ jenkins_process_user }}"
        group: "{{ jenkins_process_group }}"
        mode: 0775

    - name: Configure proxy config for Jenkins
      template:
        src: proxy.xml
        dest: "{{ jenkins_home }}/proxy.xml"
        owner: "{{ jenkins_process_user }}"
        group: "{{ jenkins_process_group }}"
        mode: 0664
      register: jenkins_proxy_config
      when:
        - jenkins_proxy_host | length > 0
        - jenkins_proxy_port | length > 0

    - name: Trigger handlers immediately in case Jenkins was installed
      meta: flush_handlers

    - name: Configure default users if Jenkins was installed.
      ansible.builtin.template:
        src: basic-security.groovy.j2
        dest: "{{ jenkins_home }}/init.groovy.d/basic-security.groovy"
        owner: "{{ jenkins_process_user }}"
        group: "{{ jenkins_process_group }}"
        mode: 0775
      register: jenkins_users_config
      become: true
      when: jenkins_installed is defined and jenkins_installed.changed

    # A handler cannot be called conditionally without workaround.
    - name: Immediately restart Jenkins on http or user changes.
      service: name=jenkins state=restarted
      when: >
        (jenkins_users_config is defined and jenkins_users_config.changed)
        or (jenkins_http_config is defined and jenkins_http_config.changed)
        or (jenkins_home_config is defined and jenkins_home_config.changed)
        or (jenkins_proxy_config is defined and jenkins_proxy_config.changed)

    - name: Disable plugin setup wizard.
      community.general.jenkins_script:
        script: |
          import static jenkins.model.Jenkins.instance as jenkins
          import jenkins.install.InstallState
          if (!jenkins.installState.isSetupComplete()) {
            InstallState.INITIAL_SETUP_COMPLETED.initializeState()
          }
        user: "{{ jenkins_admin_username }}"
        password: "{{ jenkins_admin_password }}"
  become: true
